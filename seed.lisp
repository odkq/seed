; Some handy functions
(defun not (e) (if (eq e t) () t))
(defun list (x . y) (cons x y))

(defun nth (lis n)    ;;  Returns nth element of lis.
  (if (= n 0)
    (car lis)
    (nth (cdr lis) (- n 1))))

; let for temporary variables with scope
(defmacro let (var val . body)
  (cons (cons 'lambda (cons (list var) body))
    (list val)))

; do times for easy iteration
(defmacro dotimes (expression body)
  (list 'let 'i '0
    (list 'while (list '< 'i expression)
    body
    (list 'setq 'i (list '+ 'i '1)))))

(defmacro progn (expr . rest)
    (list (cons 'lambda (cons () (cons expr rest)))))

; VT100 escape sequences. See http://www.termsys.demon.co.uk/vtansi.htm
(define esc (number->byte 27))
(defun curnopar (s) (string-append esc s))
(defun curonepar (n s) (string-append esc "[" (number->string n) s))
(defun curtwopar (a b s) (string-append esc "[" (number->string a) ";"
                          (number->string b) s))
(defun cur-home () (curnopar "[H"))
(defun cur-xy (x y) (curtwopar y x "f"))
(defun cur-up (y) (curonepar y "A"))
(defun cur-down (y) (curonepar y "B"))
(defun cur-left (y) (curonepar y "D"))
(defun cur-right (y) (curnopar y "C"))
(defun cur-save () (curnopar "[s"))
(defun cur-restore () (curnopar "[u"))
(defun clr-screen () (curnopar "[2J"))
(defun clr-to-eol () (curnopar "[K"))
(defun clear-to-sol () (curnopar "[1K"))
(defun clear-row () (curnopar  "[2K"))
(defun clear-above () (curonepar "[1J"))
(defun clear-below () (curonepar "[J"))
(defun clear-attribs () (curnopar "[0m"))
(defun scroll (s e) (curtwopar s e "r"))
(defun scroll-down () (curonepar "D"))
(defun scroll-up () (curonepar "M"))
(defun set-one-attrib (a) (curonepar a "m"))
(defun set-two-attrib (a b) (curtwopar a b "m"))
(defun prn-xy (x y s) (prn (cur-xy x y)) (prn s))

(define width (car (screen-size)))
(define height (car(cdr(screen-size))))

(define horizontal-line "─")
(define vertical-line "│")
(define corner-top-left "┌")
(define corner-top-right "┐")
(define corner-bottom-left "└")
(define corner-bottom-right "┘")

(defun reset-screen ()
  (while (< y height)
    (while (< x (+ width 1))
      (prn (cur-xy x y))
      (if (= y (- height 2)) (prn "─") (prn "·"))
        (setq x (+ x 1)))
     (sleep 1)
     (setq x 0)
     (setq y (+ y 1))))

(defun draw-buffer (w-x w-y w-w w-h delta-x delta-y buffer)
  (let tx 0
    (let ty 0
      (while (< tx w-h)
        (while (< ty w-w)
          (prn-xy (+ w-x tx) (+ w-y ty) "·")
          (setq ty (+ ty 1)))
        (setq ty 0)
        (setq tx (+ tx 1))))))

(defun draw-hline (x y width)
  (let tx 0
    (while (< tx (+ width 1))
      (prn-xy (+ tx x) y horizontal-line)
      (setq tx (+ tx 1)))))

(defun draw-vline (x y height)
  (let ty 0
    (while (< ty (+ height 1))
      (prn-xy x (+ ty y) vertical-line)
      (setq ty (+ ty 1)))))

(defun draw-box (x y width height)
  (draw-hline (+ x 1) y (- width 2))
  (draw-hline (+ x 1) (+ y height) (- width 2))
  (draw-vline x (+ y 1) (- height 2))
  (draw-vline (+ x width) (+ y 1) (- height 2))
  (prn-xy x y corner-top-left)
  (prn-xy (+ x width) y corner-top-right)
  (prn-xy x (+ y height) corner-bottom-left)
  (prn-xy (+ x width) (+ y height) corner-bottom-right))

; Entry point
(prn (clr-screen))

(defun test-attributes ()
  (prn-xy 40 30 "normal")
  (prn (set-one-attrib 1))
  (prn "bright")
  (prn (clear-attribs))
  (prn-xy 40 31 "normal")
  (prn (set-one-attrib 2))
  (prn "dim")
  (prn (clear-attribs))
  (prn-xy 40 32 "normal")
  (prn (set-one-attrib 4))
  (prn "underscore")
  (prn (clear-attribs))
  (prn-xy 40 33 "normal")
  (prn (set-one-attrib 5))
  (prn "blinking")
  (prn (clear-attribs))
  (prn-xy 40 34 "normal")
  (prn (set-one-attrib 7))
  (prn "reverse")
  (prn (clear-attribs))
  (prn-xy 40 35 "normal")
  (prn (set-one-attrib 8))
  (prn "hidden")
  (prn (clear-attribs)))

(defun test-colors ()
  (let fg_color 30
    (while (< fg_color 38)
      (let bg_color 40
        (while (< bg_color 48)
          (let x (+ (- bg_color 40)
                    (- bg_color 40)
                    (- bg_color 40)
                    (- bg_color 40))
            (let y (- fg_color 30)
              (prn-xy   x y "-")
              (prn (set-two-attrib fg_color bg_color))
              (prn "AB")
              (prn (clear-attribs))))
          (setq bg_color (+ bg_color 1))))
      (setq fg_color (+ fg_color 1)))))

(define do-loop 1)
(test-attributes)
(test-colors)
(while (= do-loop 1)
  (let key (read-character)
    (if (= key 113)
      (setq do-loop 0))
    (draw-buffer 5 5 20 20 0 0 ())
    (draw-box 4 4 21 21)))

;(define do-loop 1)
;(define y 1)
;(while (= do-loop 1)
;  (let key (read-character)
;    (if (= key 113)
;      (setq do-loop 0))
;    (prn (cur-xy 5 y))
;    (prn "    ")
;    (prn (cur-xy 5 y))
;    (prn (number->string key)))
;    (setq y (+ y 1)))

;(sleep 5)
;(define i 0)
;(while (not (= i 20))
;     (prn (cur-xy 0 i))
;     (prn "Testing VT100 escape sequences")
;     (sleep 1)
;     (define i (+ i 1)))
